const EventEmitter = require('events');

const isLib = (library, client) => {
    try {
      const lib = require.cache[require.resolve(library)];
      return lib && client instanceof lib.exports.Client;
    } catch (e) {
      return false;
    }
  };
  
  const isASupportedLibrary = client => isLib('discord.js', client) || isLib('eris', client);
  
  class turkcebotlist extends EventEmitter {
     
    constructor(token, client) {
      super();
      this.token = token;
  
      if (client && isASupportedLibrary(client)) {
      this.statsInterval = 1800000;
  
        /**
         * Durum Gonderici Hatasiz Calisinca
         * @event iletili
         */
  
        /**
         * Durum Gonderici Hatasini iletir
         * @event hata
         * @param {error} 
         */
  
        this.client = client;
        this.client.on('ready', () => {
		if(!this.token) throw new Error('[Türkçe Bot List] Anahtar hatalı!')
          this.durumgonder()
            .then(() => this.emit('yolla'))
            .catch(e => this.emit('hata', e));
          setInterval(() => {
            this.durumgonder()
              .then(() => this.emit('yolla'))
              .catch(e => this.emit('hata', e));
          }, this.statsInterval);
        });
      } else if (client) {
        console.warn(`[Türkçe Bot List] Sunucu Sayısı Göndermede Bir Hata Oluştu. Uygunsuz Sürüm!`);
      }
	}  
	/**
   * Apimize Durumları Gonderir
   * @param {number|number[]} Bot Sunucu Sayisi
   * @param {number} [shardId] Shard Numarasi
   * @param {number} [shardCount] Tum Shardlar.
   * @returns {Promise<Object>}
   */
  async durumgonder(serverCount, shardId, shardCount) {
    if (!serverCount && !this.client) throw new Error('[Türkçe Bot List] client tanımı yapmanız gerekmektedir');
    const data = {};
    if (serverCount) {
      data.server_count = serverCount;
      data.shard_id = shardId;
      data.shard_count = shardCount;
    } else {
      data.server_count = this.client.guilds.size;
      if (this.client.shard && this.client.shard.count) {
        data.shard_id = this.client.shard.id;
        data.shard_count = this.client.shard.count;
      } else if (this.client.shards && this.client.shards.size !== 1) {
        data.shard_count = this.client.shards.size;
      }
    }
      require('request')('https://wordbotlist.glitch.me/bot/' + this.token + '/' + data.server_count + '/' + data.shard_id + '/' + data.shard_count, async function (error, response, body) {
        if (error) return false;
        
        var genel = JSON.parse(body);
        if(genel.durum === "Token hatali") throw new Error('[Türkçe Bot List] Girilen token hatalıdır');
        else if(genel.durum === "Sunucu Sayisi Gonderilmedi") throw new Error('[Türkçe Bot List] Sunucu sayısı göndermede hata: Sunucu verileri client üzerinden çekilemedi');
		else return 'Başarılı!'
    })}

    async oykontrol(id) {
      if (!this.token) throw new Error('[Türkçe Bot List] Oy kontrol için api giriş anahtarı girmelisin');
      if (!id) throw new Error('[Türkçe Bot List] Oy Kontrol kullanıcı ID Girmelisin');
      require('request')('https://wordbotlist.glitch.me/api/oy/' + this.token + '/' + id, async function (error, response, body) {
      if (error) return console.warn('[Türkçe Bot List] Kullanıcı Oyları Alınırken bir hata oluştu')
      
      var genel = JSON.parse(body);
      if(genel.durum === "Token hatali") throw new Error('[Türkçe Bot List]  Oy kontrol için girilen token hatalıdır');
      else return genel.durum
  })}

}
module.exports = turkcebotlist;