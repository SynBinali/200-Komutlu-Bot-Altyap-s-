const { RichEmbed } = require("discord.js"); 
let authors = [];
let warned = [];
let punishedList = [];
let messageLog = [];

module.exports = async (client, options) => {
  
  const uyarılimiti = (options && options.uyarılimiti) || 4; 
  const susturmalimiti = (options && options.susturmalimiti) || 6; 
  const aralık = (options && options.aralık) || 1500; 
  const uyarımesajı = (options && options.uyarımesajı) || "Spam yapmayı keser misin? Yoksa susturulacaksın!!"; 
  const susturmamesajı = (options && options.susturmamesajı) || "Çok faaazla mesaj!! Susturuldun.";
  const maksspam_uyarı = (options && options.maksspam_uyarı || 3); 
  const maksspam_susturma = (options && options. maksspam_susturma || 4); 
  const adminrol = (options && options.adminrol) || [];
  const adminkullanıcı = (options && options.adminkullanıcı) || []; 
  const susturmarolü = (options && options.susturmarolü) || "Susturuldu"; 
  const susturmasüresi = (options && options.susturmasüresi) || 900000; 
  const logkanalı = (options && options.logkanalı) || "antispam-log"; 

  if(isNaN(uyarılimiti)) throw new Error("HATA: <uyarılimiti> seçeneği doğru ayarlanmamış! Lütfen ayarlarda bir sayı olup olmadığını tekrar kontrol edin.");
  if(isNaN(susturmalimiti)) throw new Error("HATA: <susturmalimiti> seçeneği doğru ayarlanmamış! Lütfen ayarlara bir numara ekleyin.");
  if(isNaN(aralık)) throw new Error("HATA: <aralık> seçeneği doğru ayarlanmamış! Lütfen ayarlara bir numara ekleyin.");
  if(!isNaN(uyarımesajı) || uyarımesajı.length < 5) throw new Error("HATA: <uyarımesajı> seçeneği bir dize olmalı ve en az 5 karakter uzunluğunda olmalıdır (Boşluk dahil).");
  if(!isNaN(susturmamesajı) || susturmamesajı.length < 5) throw new Error("HATA: <susturmamesajı> seçeneği bir dize olmalı ve en az 5 karakter uzunluğunda olmalıdır (Boşluk dahil).");
  if(isNaN(maksspam_uyarı)) throw new Error("HATA: <maksspam_uyarı> seçeneği doğru ayarlanmamış! Lütfen ayarlarda bir sayı olup olmadığını tekrar kontrol edin.")
  if(isNaN(maksspam_susturma)) throw new Error("HATA: <maksspam_susturma> seçeneği doğru ayarlanmamış! Lütfen ayarlarda bir sayı olup olmadığını tekrar kontrol edin.");
  if(isNaN(susturmasüresi)) throw new Error("HATA: <susturmasüresi> seçeneği doğru ayarlanmamış! Lütfen ayarlarda bir sayı olup olmadığını tekrar kontrol edin.");
  if(adminrol.constructor !== Array) throw new Error("HATA: <adminrol> seçeneği doğru ayarlanmamış! Lütfen ayarlarda bir dizi olup olmadığını tekrar kontrol edin.");
  if(adminkullanıcı.constructor !== Array) throw new Error("HATA: <adminkullanıcı> seçeneği doğru ayarlanmadı! Lütfen ayarlarda bir dizi olup olmadığını tekrar kontrol edin.");
  
 client.on("checkMessage", async (message) => {
 
  let clock = new Date();
  let ss = String(clock.getSeconds()).padStart(2, '0');
  let min = String(clock.getMinutes()).padStart(2, '0');
  let hrs = String(clock.getHours()).padStart(1, '0');
  clock = hrs + ':' + min +':' + ss;

  let TheDate = new Date()
  let zilelesaptamanii = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
  let weekday = zilelesaptamanii[TheDate.getDay()];
  let dd = String(TheDate.getDate()).padStart(2, '0');
  let mon = String(TheDate.getMonth()+ 1);
  let year = String(TheDate.getFullYear()).padStart(4,'00');
  TheDate = weekday+", " + mon + '/' + dd +'/' + year;

  let amORpm;
  if(hrs >= 0 && hrs <= 12){
      amORpm = "AM"
  }else{
      amORpm = "PM"
  };
  // The Mute function.
  const MuteMember = async (m, muteMsg) => {
    for (var i = 0; i < messageLog.length; i++) {
        if (messageLog[i].author == m.author.id) {
          messageLog.splice(i);
        }
      }
  
      punishedList.push(m.author.id);
      
      let user = m.guild.members.get(m.author.id);
      let ReportChannel = m.guild.channels.find(ch => ch.name === logkanalı);
      if(!ReportChannel){
        try{
            ReportChannel = await m.guild.createChannel('antispam-log', {
              type: 'text',
              permissionOverwrites:[{
                id: m.guild.id,
                deny: ['VIEW_CHANNEL']
              }]
            })
              .then(m=> m.send(`**\`antispam-log\`** kanalı açılmadığı için otomatik olarak açıldı.`))
              .catch(console.error)
  
        }catch(e){
          console.log(e.stack);
        }
      }; 

      let role = m.guild.roles.find(namae => namae.name === susturmarolü);      
      if (!role) {
        try {
            role = await m.guild.createRole({
                name: "Susturuldu",
                color: "#000000",
                permissions: []
            })
            m.guild.channels.forEach(async (channel, id) => {
                await channel.overwritePermissions(role, {
                    SEND_MESSAGES: false,
                    ADD_REACTIONS: false,
                    SEND_TTS_MESSAGES: false,
                    ATTACH_FILES: false,
                    SPEAK: false
                });
            });
           ReportChannel.send(`**\`Susturuldu\`** rolü açılmadığı için otomatik olarak açıldı.`) 
        } catch (e) {
            console.log(e.stack);
        }
    }
    
      if (user) {
        user.addRole(role).then(()=>{
          m.channel.send(`<@!${m.author.id}>, ${muteMsg}`);
          let muteEmbed = new RichEmbed()
            .setAuthor('Anti Spam Ceza Verilişi')
            .addField('Bu kullanıcı susturuldu **->**',`${user}`)
            .addField(`Ne kadar süre susturuldu?`,`${susturmasüresi} saniye (10 min)`)
            .addField('Sebebi **->**', `Spam`)
            .addField(`Susturulduğunda saat:`,TheDate+ " "+ clock+" "+amORpm)
            .setColor('#D9D900')
          ReportChannel.send(muteEmbed);
          setTimeout(()=>{
            user.removeRole(role);
            let unmutedEmbed = new RichEmbed()
              .setAuthor('Anti Spam Ceza Bitişi')
              .addField(`Susturulan Kullanıcı`,`${user}`)
              .addField(`Sebebi **->**`,`Zaman doldu(10 dk)`)
              .setColor('#D9D900')
          ReportChannel.send(unmutedEmbed)
          }, susturmasüresi);
          return true;
       }).catch((e) => {
console.log(e)
          return false;
      });
    }
  }
  
    
   const WarnMember = async (m, reply) => {
    warned.push(m.author.id);
    m.channel.send(`<@${m.author.id}>, ${reply}`);
   }

    if (message.author.bot) return;
    if (message.channel.type !== "text" || !message.member || !message.guild || !message.channel.guild) return;
   
    if (message.member.roles.some(r => adminrol.includes(r.name)) || adminkullanıcı.includes(message.author.tag)) return;

    if (message.author.id !== client.user.id) {
      let currentTime = Math.floor(Date.now());
      authors.push({
        "time": currentTime,
        "author": message.author.id
      });
      
      messageLog.push({
        "message": message.content,
        "author": message.author.id
      });
      
      let msgMatch = 0;
      for (var i = 0; i < messageLog.length; i++) {
        if (messageLog[i].message == message.content && (messageLog[i].author == message.author.id) && (message.author.id !== client.user.id)) {
          msgMatch++;
        }
      }
      
      if (msgMatch == maksspam_uyarı && !warned.includes(message.author.id)) {
        WarnMember(message, uyarımesajı);
      }

      if (msgMatch == maksspam_susturma && !punishedList.includes(message.author.id)) {
        MuteMember(message, susturmamesajı);
      }

      var matched = 0;

      for (var i = 0; i < authors.length; i++) {
        if (authors[i].time > currentTime - aralık) {
          matched++;
          if (matched == uyarılimiti && !warned.includes(message.author.id)) {
            WarnMember(message, uyarımesajı);
          } else if (matched == susturmamesajı) {
            if (!punishedList.includes(message.author.id)) {
              MuteMember(message, susturmamesajı);
            }
          }
        } else if (authors[i].time < currentTime - aralık) {
          authors.splice(i);
          warned.splice(warned.indexOf(authors[i]));
          punishedList.splice(warned.indexOf(authors[i]));
        }

        if (messageLog.length >= 200) {
          messageLog.shift();
        }
      }
    }
  });
}