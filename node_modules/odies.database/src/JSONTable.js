const EventEmitter = require("events").EventEmitter;
let db;

class JSONTable extends EventEmitter {

    constructor(file, options) {
        super();
        
        if (!file) return console.error('[JSON] : Dosya tespit edilemedi.');
        if (file.endsWith('.json')) return console.error('[JSON] : Sadece dosya ismi giriniz. (Yanlış kullanım: database.json, Doğru kullanım: database)')
        if (!options["table"]) return console.error('[JSON] : Bir "table" girmelisiniz.')

        this.emit("ready")

        db = require('v2db')({
			name: `${file}_${options["table"]}`, // varsayılan: db
			seperator: '.', // varsayılan: .
			language: 'tr', // varsayılan: en
			yaml: false, // varsayılan: false
});
    }

    async set(data, value) {
        if (!data) return console.error('[JSON] : Bir "data" giriniz.');
        if (!value) return console.error('[JSON] : Bir "value" giriniz.');

        await db.set(data, value);
        return await db.get(data);
    }

    async delete(data) {
        if (!data) return console.error('[JSON] : Bir "data" giriniz.');

        let Check = await db.get(data);
        if (!Check) {
            return console.error('[JSON] : Böyle bir data bulunamadı.');
        } else {
            await db.delete(data);
            return true;
        }
    }

    async deleteAll() {
        return await db.deleteAll();
    }

    async fetch(data) {
        if (!data) return console.error('[JSON] : Bir "data" giriniz.');

        return await db.get(data);
    }

    async get(data) {
        if (!data) return console.error('[JSON] : Bir "data" giriniz.');

        return await db.get(data);
    }

    async add(data, number) {
        if (!data) return console.error('[JSON] : Bir "data" giriniz.');
        if (!number) return console.error('[JSON] : Bir "number" giriniz.');

        await db.add(data, number);
        return await db.get(data);
    }

    async subtract(data, number) {
        if (!data) return console.error('[JSON] : Bir "data" giriniz.');
        if (!number) return console.error('[JSON] : Bir "number" giriniz.');

        await db.substract(data, number);
        return await db.get(data);
    }

    async push(data, value) {
        if (!data) return console.error('[JSON] : Bir "data" giriniz.');
        if (!value) return console.error('[JSON] : Bir "value" giriniz.');

        await db.push(data, value);
        return await db.get(data);
    }

    async unpush(data, value) {
        if (!data) return console.error('[JSON] : Bir "data" giriniz.');
        if (!value) return console.error('[JSON] : Bir "value" giriniz.');

        await db.unpush(data, value);
        return await db.get(data);
    }

    async all() {
        return await db.all()
    }

    async move(database, data) {
        if (database["database"] !== 'quick.db') {
            return console.error('[JSON] : "quick.db" modülünü giriniz.')
        }

        const All = database["database"].all()
        All.map(x => {
            db.set(x.data, x.ID)
        })

        return true;
    }

}

module.exports = JSONTable;