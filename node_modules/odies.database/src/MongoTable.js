const EventEmitter = require("events").EventEmitter;
const { Database } = require("quickmongo");
let db;

class MongoTable extends EventEmitter {

    constructor(connectionUrl, options) {
        super();

        if (!connectionUrl || !connectionUrl.startsWith('mongodb')) return console.error('[MongoDB] : Düzgün bağlanmamış.');
        
        let Table;
        if (!options["table"]) Table = 'odies'
        if (options["table"]) Table = options["table"]

        this.options = {
            "table": options["table"],
            "connectionUrl": connectionUrl
        }

        const Mongo = new Database(connectionUrl)
        db = Mongo.createModel(options["table"])

        db.on("ready", async => {
            this.emit("ready")
        })

        db.on("error", async error => {
            this.emit("error", error)
        })
    }

    
    async set(data, value) {
        if (!data) return console.error('[MongoDB] : Bir "data" giriniz.');
        if (!value) return console.error('[MongoDB] : Bir "value" giriniz.');

        await db.set(data, value)
        return await db.fetch(data)
    }
    async delete(data) {
        if (!data) return console.error('[MongoDB] : Bir "data" giriniz.');

        let Check = await db.fetch(data);
        if (!Check) {
            return console.error('[MongoDB] : Böyle bir data bulunamadı.');
        } else {
            await db.delete(data);
            return true;
        }
    }

    async deleteAll() {
        return await db.deleteAll()
    }

    async fetch(data) {
        if (!data) return console.error('[MongoDB] : Bir "data" giriniz.');

        return await db.fetch(data);
    }

    async get(data) {
        if (!data) return console.error('[MongoDB] : Bir "data" giriniz.');

        return await db.get(data);
    }

    async add(data, number) {
        if (!data) return console.error('[MongoDB] : Bir "data" giriniz.');
        if (!number) return console.error('[MongoDB] : Bir "number" giriniz.');

        await db.add(data, number);
        return await db.fetch(data);
    }

    async subtract(data, number) {
        if (!data) return console.error('[MongoDB] : Bir "data" giriniz.');
        if (!number) return console.error('[MongoDB] : Bir "number" giriniz.');

        await db.subtract(data, number);
        return await db.fetch(data);
    }

    async push(data, value) {
        if (!data) return console.error('[MongoDB] : Bir "data" giriniz.');
        if (!value) return console.error('[MongoDB] : Bir "value" giriniz.');

        await db.push(data, value);
        return await db.fetch(data);
    }

    async unpush(data, value) {
        if (!data) return console.error('[MongoDB] : Bir "data" giriniz.');
        if (!value) return console.error('[MongoDB] : Bir "value" giriniz.');

        await db.pull(data, value);
        return await db.fetch(data);
    }

    async all() {
        return await db.all()
    }

    async move(database, data) {
        if (database["database"] !== 'quick.db') {
            return console.error('[MongoDB] : "quick.db" modülünü giriniz.')
        }

        await db.import(database["database"].all())

    }

    async ping() {
        const ping = await db.ping()
        return {
            "okuma": ping.read,
            "yazma": ping.write,
            "ortalama": ping.average
        }
    }

}

module.exports = MongoTable;