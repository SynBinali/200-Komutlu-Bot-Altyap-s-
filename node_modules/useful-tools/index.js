class index {
	static tarih(date, format, drm) {
		const aylar = "Ocak_Şubat_Mart_Nisan_Mayıs_Haziran_Temmuz_Ağustos_Eylül_Ekim_Kasım_Aralık".split("_")
		const aylarShort = "Oca_Şub_Mar_Nis_May_Haz_Tem_Ağu_Eyl_Eki_Kas_Ara".split("_")
		const gunler = "Pazar_Pazartesi_Salı_Çarşamba_Perşembe_Cuma_Cumartesi".split("_")
		const gunlerShort = "Pzr_Pts_Sal_Çar_Per_Cum_Cts".split("_")
		if(!date) throw new TypeError("Lütfen türkçeleştirilecek tarihi yazın.")
		var x = new Date(date)
		var tarih = new Date(Date.UTC(x.getFullYear(), x.getMonth(), x.getDate(), x.getHours(), x.getMinutes(), x.getSeconds()))
		var saat = `${tarih.getHours() < 10 ? "0" + tarih.getHours() : tarih.getHours()}:${tarih.getMinutes() < 10 ? "0" + tarih.getMinutes() : tarih.getMinutes()}:${tarih.getSeconds() < 10 ? "0" + tarih.getSeconds() : tarih.getSeconds()}`
		if(format && drm) {
			var y = format.replace("S", tarih.getHours() < 10 ? "0" + tarih.getHours() : tarih.getHours()).replace("D", tarih.getMinutes() < 10 ? "0" + tarih.getMinutes() : tarih.getMinutes()).replace("s", tarih.getSeconds() < 10 ? "0" + tarih.getSeconds() : tarih.getSeconds()).replace("G", tarih.getDate() < 10 ? "0" + tarih.getDate() : tarih.getDate()).replace("A", tarih.getMonth() < 10 ? tarih.getMonth() : "0" + tarih.getMonth()).replace("Y", tarih.getFullYear()).replace("g", gunlerShort[tarih.getDay()]).replace("a", aylarShort[tarih.getMonth()])
			return y
		} else if(drm) {
			return `${tarih.getDate() < 10 ? "0" + tarih.getDate() : tarih.getDate()} ${aylarShort[tarih.getMonth().toString()]} ${tarih.getFullYear()} ${gunlerShort[tarih.getDay().toString()]} ${saat}`
		} else if(format) {
			var y = format.replace("S", tarih.getHours() < 10 ? "0" + tarih.getHours() : tarih.getHours()).replace("D", tarih.getMinutes() < 10 ? "0" + tarih.getMinutes() : tarih.getMinutes()).replace("s", tarih.getSeconds() < 10 ? "0" + tarih.getSeconds() : tarih.getSeconds()).replace("G", tarih.getDate() < 10 ? "0" + tarih.getDate() : tarih.getDate()).replace("A", tarih.getMonth() < 10 ? tarih.getMonth() : "0" + tarih.getMonth()).replace("Y", tarih.getFullYear()).replace("g", gunler[tarih.getDay()]).replace("a", aylar[tarih.getMonth()])
			return y
		} else {
			return `${tarih.getDate() < 10 ? "0" + tarih.getDate() : tarih.getDate()} ${aylar[tarih.getMonth().toString()]} ${tarih.getFullYear()} ${gunler[tarih.getDay().toString()]} ${saat}`
		}
	}

	static esgeç(yazı, uzunluk) {
		if(!yazı) throw new TypeError("Lütfen kısaltılacak bir yazı yazın.")
		if(!uzunluk) throw new TypeError("Lütfen es geçilecek karakter sayısını yazın.")
		if(yazı.length <= uzunluk) throw new TypeError("Es geçilecek karakter sayısı yazıdan uzun olamaz.")
		if(uzunluk === 0) throw new TypeError("Es geçilecek karakter sayısı sıfır olamaz.")
		if(typeof yazı !== "string") throw new TypeError("Lütfen kısaltılacak şeyi yazı(string) formatında yazın.")
		if(typeof uzunluk !== "number") throw new TypeError("Lütfen kısaltılacak karakter sayısını sayı(number) formatında yazın.")
		return `${yazı.substring(uzunluk, yazı.length)}`
	}

	static sondanesgeç(yazı, uzunluk) {
		if(!yazı) throw new TypeError("Lütfen sondan es geçilecek bir yazı yazın.")
		if(!uzunluk) throw new TypeError("Lütfen sondan es geçilecek karakter sayısını yazın.")
		if(yazı.length < uzunluk) throw new TypeError("Sondan es geçilecek karakter sayısı yazıdan uzun olamaz.")
		if(uzunluk === 0) throw new TypeError("Sondan es geçilecek karakter sayısı sıfır olamaz.")
		if(typeof yazı !== "string") throw new TypeError("Lütfen kısaltılacak şeyi yazı(string) formatında yazın.")
		if(typeof uzunluk !== "number") throw new TypeError("Lütfen kısaltılacak karakter sayısını sayı(number) formatında yazın.")
		return `${yazı.substring(0, yazı.length - uzunluk)}`
	}

	static seg(yazı, uzunluk) {
		if(!yazı) throw new TypeError("Lütfen sondan es geçilecek bir yazı yazın.")
		if(!uzunluk) throw new TypeError("Lütfen sondan es geçilecek karakter sayısını yazın.")
		if(yazı.length <= uzunluk) throw new TypeError("Sondan es geçilecek karakter sayısı yazıdan uzun olamaz.")
		if(uzunluk === 0) throw new TypeError("Sondan es geçilecek karakter sayısı sıfır olamaz.")
		if(typeof yazı !== "string") throw new TypeError("Lütfen kısaltılacak şeyi yazı(string) formatında yazın.")
		if(typeof uzunluk !== "number") throw new TypeError("Lütfen kısaltılacak karakter sayısını sayı(number) formatında yazın.")
		return `${yazı.substring(0, yazı.length - uzunluk)}`
	}

	static hepsiniçevir(yazı, old, neww, bk) {
		if(!yazı) throw new TypeError("Lütfen çevirilecek yazıyı yazın.")
		if(!old) throw new TypeError("Lütfen yazıdan çevrilecek eski karakterleri yazın.")
		if(!neww) throw new TypeError("Lütfen yazıdan çevrilecek yeni karakterleri yazın.")
		if(typeof yazı !== "string") throw new TypeError("Lütfen çevirilecek şeyi yazı(string) formatında yazın.")
		if(typeof old !== "string") throw new TypeError("Lütfen yazıdan çevirilecek eski karakterleri yazı(string) formatında yazın.")
		if(typeof neww !== "string") throw new TypeError("Lütfen yazıdan çevirilecek eski karakterleri yazı(string) formatında yazın.")
		if(bk && bk === true) {
			return `${yazı.toLowerCase().replace(new RegExp(old.toLowerCase(), 'g'), neww)}`
		} else {
			return `${yazı.replace(new RegExp(old, 'g'), neww)}`
		}
	}

	static hç(yazı, old, neww, bk) {
		if(!yazı) throw new TypeError("Lütfen çevirilecek yazıyı yazın.")
		if(!old) throw new TypeError("Lütfen yazıdan çevrilecek eski karakterleri yazın.")
		if(!neww) throw new TypeError("Lütfen yazıdan çevrilecek yeni karakterleri yazın.")
		if(typeof yazı !== "string") throw new TypeError("Lütfen çevirilecek şeyi yazı(string) formatında yazın.")
		if(typeof old !== "string") throw new TypeError("Lütfen yazıdan çevirilecek eski karakterleri yazı(string) formatında yazın.")
		if(typeof neww !== "string") throw new TypeError("Lütfen yazıdan çevirilecek eski karakterleri yazı(string) formatında yazın.")
		if(bk && bk === true) {
			return `${yazı.toLowerCase().replace(new RegExp(old.toLowerCase(), 'g'), neww)}`
		} else {
			return `${yazı.replace(new RegExp(old, 'g'), neww)}`
		}
	}

	static hesapla(yazı) {
		if(!yazı) throw new TypeError("Lütfen hesaplanacak işlemi yazın.")
		if(typeof yazı !== "string") throw new TypeError("Lütfen hesaplanacak işlemi yazı(string) formatında yazın.")
		const reg = /^[+/*-0123456789]+$/g
		if(!yazı.match(reg)) throw new TypeError("Lütfen sadece hesaplanacak işlemi yazın.")
		return eval(yazı)
	}

	static küçüktenbüyüğe(arr, format) {
		if(!arr) throw new TypeError("Lütfen sıralanacak sayıları array formatı içinde yazın.")
		arr.forEach(s => {
			if(typeof s !== 'number') throw new TypeError("Lütfen array formatı içerisine sadece sayı yazın.")
		})
		var sıra = arr.sort((a, b) => { return a - b })
		if(format) {
			if(format === 'yazı') {
				return sıra.join(' < ')
			} else if (format === 'array') {
				return sıra
			} else {
				return sıra
			}
		} else {
			return sıra
		}
	}

	static ktob(arr, format) {
		if(!arr) throw new TypeError("Lütfen sıralanacak sayıları array formatı içinde yazın.")
		arr.forEach(s => {
			if(typeof s !== 'number') throw new TypeError("Lütfen array formatı içerisine sadece sayı yazın.")
		})
		var sıra = arr.sort((a, b) => { return a - b })
		if(format) {
			if(format === 'yazı') {
				return sıra.join(' < ')
			} else if (format === 'array') {
				return sıra
			} else {
				return sıra
			}
		} else {
			return sıra
		}
	}

	static büyüktenküçüğe(arr, format) {
		if(!arr) throw new TypeError("Lütfen sıralanacak sayıları array formatı içinde yazın.")
		arr.forEach(s => {
			if(typeof s !== 'number') throw new TypeError("Lütfen array formatı içerisine sadece sayı yazın.")
		})
		var sıra = arr.sort((a, b) => { return b - a })
		if(format) {
			if(format === 'yazı') {
				return sıra.join(' > ')
			} else if (format === 'array') {
				return sıra
			} else {
				return sıra
			}
		} else {
			return sıra
		}
	}

	static btok(arr, format) {
		if(!arr) throw new TypeError("Lütfen sıralanacak sayıları array formatı içinde yazın.")
		arr.forEach(s => {
			if(typeof s !== 'number') throw new TypeError("Lütfen array formatı içerisine sadece sayı yazın.")
		})
		var sıra = arr.sort((a, b) => { return b - a })
		if(format) {
			if(format === 'yazı') {
				return sıra.join(' > ')
			} else if (format === 'array') {
				return sıra
			} else {
				return sıra
			}
		} else {
			return sıra
		}
	}

	static rastgele(fir, sec) {
		if(!fir || typeof fir !== 'number') throw new TypeError("Lütfen değerleri sayı şeklinde yazın ve ikinci değerin ilk değerden daha büyük olduğundan emin olun.")
		if(!sec || typeof sec !== 'number' || fir > sec) throw new TypeError("Lütfen değerleri sayı şeklinde yazın ve ikinci değerin ilk değerden daha büyük olduğundan emin olun.")
		var len = Math.floor(Math.random() * (Math.floor(Math.random() * fir) + Math.floor(Math.random() * sec)))
		return Math.floor(len)
	}
}

module.exports = index;